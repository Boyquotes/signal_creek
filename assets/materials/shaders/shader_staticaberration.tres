[gd_resource type="Shader" format=2]

[resource]
code = "// chromatic aberration
//---------------------------------

shader_type canvas_item;

// STATIC ABERRATION

uniform vec2 r_displacement = vec2(3.0, 0.0);
uniform vec2 g_displacement = vec2(0.0, 0.0);
uniform vec2 b_displacement = vec2(-3.0, 0.0);

uniform float darkness = 1.0;

// SHOCKWAVE

uniform float strength: hint_range(0.0, 0.1, 0.001) = 0.08;
uniform vec2 center = vec2(0.5, 0.5);
uniform float radius: hint_range(0.0, 1.0, 0.001) = 0;

uniform float aberration: hint_range(0.0, 1.0, 0.001) = 0.425;
uniform float width: hint_range(0.0, 0.1, 0.0001) = 0.04;
uniform float feather: hint_range(0.0, 1.0, 0.001) = 0.135;

float rand(float n){return fract(sin(n) * 43758.5453123);}

vec4 noise(vec2 uv) {
	
	float r = rand(10.7 * uv.x + rand(uv.y * sin(TIME)));
	return vec4(r, r, r, 1.0);
}

void fragment() {
	vec2 st = SCREEN_UV;
	float aspect_ratio = SCREEN_PIXEL_SIZE.y/SCREEN_PIXEL_SIZE.x;
	vec2 scaled_st = (st -vec2(0.0, 0.5)) / vec2(1.0, aspect_ratio) + vec2(0,0.5); 
	vec2 dist_center = scaled_st - center;
	float mask =  (1.0 - smoothstep(radius-feather, radius, length(dist_center))) * smoothstep(radius - width - feather, radius-width , length(dist_center));
	vec2 offset = normalize(dist_center)*strength*mask;
	vec2 biased_st = scaled_st - offset;
	
	vec2 abber_vec = offset*aberration*mask;
	
	vec2 final_st = st*(1.0-mask) + biased_st*mask;

	vec4 red = texture(SCREEN_TEXTURE, final_st + abber_vec + vec2(SCREEN_PIXEL_SIZE*r_displacement));
	vec4 blue = texture(SCREEN_TEXTURE, final_st - abber_vec+ vec2(SCREEN_PIXEL_SIZE*b_displacement));
	vec4 ori = texture(SCREEN_TEXTURE, final_st + vec2(SCREEN_PIXEL_SIZE*g_displacement));
	
	// STATIC ABERRATION
	float r = texture(SCREEN_TEXTURE, SCREEN_UV + vec2(SCREEN_PIXEL_SIZE*r_displacement), 0.0).r;
	float g = texture(SCREEN_TEXTURE, SCREEN_UV + vec2(SCREEN_PIXEL_SIZE*g_displacement), 0.0).g;
	float b = texture(SCREEN_TEXTURE, SCREEN_UV + vec2(SCREEN_PIXEL_SIZE*b_displacement), 0.0).b;
	
	//COLOR = vec4(r, g, b, 1.0) * darkness + (noise(UV) * 0.1);
	
	
	COLOR = vec4(red.r, ori.g, blue.b, 1.0) * darkness + (noise(UV) * 0.05);
}"
